#!/usr/bin/env python3

import subprocess
import sys
import os

VERSION = "1.0"

VPN_CONFIG_DIR = os.path.dirname(os.path.abspath(__file__))
BASE_DIR = os.path.join(VPN_CONFIG_DIR, "vpnbook-openvpn-fr231")
VPN_CONFIG_DIR = os.path.expanduser(BASE_DIR)

COUNTRIES = ["france", "canada", "usa"]

def show_help():
    print("""
Usage: too [option]
Options:
  france             Connect to VPN server in France.
  canada             Connect to VPN server in canada.
  usa                Connect to VPN server in America.
  too                Install all requirements and verify configurations.
  --help    Or  -H   Show this help message.
  --version Or  -V   Show the version of the tool.
  --update           update TooVPN
  --remove           delete TooVPN
    """)

def update_tool():
    """Update the tool by removing old files and cloning the latest version."""
    try:
        print("Updating the tool...")

        # Step 1: Remove the old version
        print("Removing the old version...")
        remove_tool()

        # Step 2: Clone the new version from GitHub
        print("Cloning the latest version from GitHub...")
        subprocess.run(["sudo", "git", "clone", "https://github.com/SamiS3d/TooVPN.git"], check=True)

        # Step 3: Move the files to the appropriate directories
        print("Installing the new version...")
        subprocess.run(["sudo", "mv", "TooVPN/too", "/usr/local/bin"], check=True)
        subprocess.run(["sudo", "mv", "TooVPN/vpnbook-openvpn-fr231", "/usr/local/bin"], check=True)

        # Step 4: Set permissions
        print("Setting executable permissions...")
        subprocess.run(["sudo", "chmod", "+x", "/usr/local/bin/too"], check=True)

        # Step 5: Clean up cloned repository
        subprocess.run(["sudo", "rm", "-rf", "TooVPN"], check=True)
        print("Tool updated successfully.")

    except subprocess.CalledProcessError as e:
        print(f"Failed to update the tool: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

def remove_tool():
    """Remove the tool and its associated files."""
    try:
        print("Removing the tool and its associated files...")
        # Paths to remove
        paths_to_remove = [
            "/usr/local/bin/TooVPN",
            "/usr/local/bin/vpnbook-openvpn-fr231",
            "/usr/local/bin/too",
        ]

        # Remove each path
        for path in paths_to_remove:
            if os.path.exists(path):
                if os.path.isdir(path):
                    subprocess.run(["sudo", "rm", "-r", path], check=True)
                else:
                    subprocess.run(["sudo", "rm", path], check=True)
                print(f"Removed: {path}")
            else:
                print(f"Path does not exist: {path}")
        
        print("Tool and files removed successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Failed to remove files: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")



def install_dependencies():
    """Install necessary dependencies for the VPN tool."""
    print("Checking for necessary dependencies...")

    # Check if openvpn is installed
    try:
        subprocess.run(["openvpn", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("OpenVPN is already installed.")
    except FileNotFoundError:
        print("OpenVPN is not installed. Installing it now...")
        try:
            subprocess.run(["sudo", "apt", "update"], check=True)
            subprocess.run(["sudo", "apt", "install", "-y", "openvpn"], check=True)
            print("OpenVPN installed successfully.")
        except subprocess.CalledProcessError as e:
            print(f"Failed to install OpenVPN: {e}")
            sys.exit(1)

def verify_vpn_config(country):
    """Verify the presence of the .ovpn file for the specified country."""
    vpn_file_path = os.path.join(VPN_CONFIG_DIR, f"vpnbook-{country}.ovpn")
    if os.path.exists(vpn_file_path):
        print(f"VPN configuration for {country.capitalize()} found locally.")
        return vpn_file_path
    else:
        print(f"VPN configuration for {country.capitalize()} not found in {VPN_CONFIG_DIR}.")
        return None

def connect_vpn(country):
vpn_files = [
    os.path.join(VPN_CONFIG_DIR, f"vpnbook-{country}-tcp80.ovpn"),
    os.path.join(VPN_CONFIG_DIR, f"vpnbook-{country}-tcp443.ovpn"),
    os.path.join(VPN_CONFIG_DIR, f"vpnbook-{country}-udp53.ovpn"),
    os.path.join(VPN_CONFIG_DIR, f"vpnbook-{country}-udp25000.ovpn")
]

for vpn_file in vpn_files:
    if os.path.exists(vpn_file):
        try:
            print(f"Connecting to VPN using configuration: {vpn_file}...")
            process = subprocess.Popen(
                ["sudo", "openvpn", "--config", vpn_file],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )

            # Check the country and display appropriate ASCII art
            if country == "fr":
                print("VPN connected to France.")
                subprocess.run(["curl", "ascii.live/forrest"])
            elif country == "usa":
                print("VPN connected to USA.")
                subprocess.run(["curl", "ascii.live/parrot"])
            elif country == "ca":
                print("VPN connected to Canada.")
                print("""                                                                              
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                              :-=++++++=-.                                          
                                       .#@@+---------------+@@=                                     
                                   .%@+------------------------=#@-                                 
                                 @%=----------------------------=--%%                               
                              :@+-=#-----------------------------=*--+@.                            
                            .@=--*=--------------------------------*---*%                           
                           ##---#=----------------------------------#---=@                          
                          @+---*------------------------------------=*---=@                         
                         @=---#--------------------------------------+=---=%                        
                        @=---=+--------------------------------------=*----@-                       
                       +#----@----------------------------------------#=---+#                       
                       @=---==----------=-----------------------------=+----@                       
                       @----+--------=@@@@@*---------------=@@@@+------+----@.                      
                       @----+-------+@@@% -@+-------------=@@- -@*-----+----#-                      
                       @----+=------*@@@@@@@#-------------@@@@@@@@-----*----#=                      
                       %=---=#------=@@@@@@@--------------%@@@@@@+-----+----#+                      
                       +#----#=-------*@@@=----------------#@@@@+-----%=----%.                      
                       .@=----*=---------------#@=--+@=--------------=+----+#                       
                        =#----=*---------------*@@+*@@=--------------%-----@                        
                         #*----+=----------------+@%=---------------+----=@                         
                    *@@*+=+@=---------------------------------------=---%%========+*%@=             
               -@@+-------==#@=--------------------------------------=%@+===----------++            
            -@+-------------=%#@=%@@@@@@@%=------------=%@@@@#%@@@@#@+---=======*@@@%@@             
          =@=--------------++#@*=-----=+*#=+#@@@@@@##===***====+**=-*@+-=*=----------=#@-           
         =#---------------=@#--------------*---------==---------------+@*==-------------#%          
         +%------------=*@@------------------%@@%%@@=------------------=@@%%%%%%%%%%%%%%%%          
          #@@@@@@@@@@%###@+----------------#@#%@@@@#@@=------------------@%##########%@@-           
            @@#######%@@@@@=------------=@@#@@%####%@@@@*--------------=@@@@@@@@@*:                 
                         :@%@@%####%@@@@%#@@@@#*+====*%@@%@@@@%%%%@@@@@%@*                          
                           #@%########%%@@:              :%@@%%%#%%%@@+                             
                               .-=-:.                                                               
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    """)
            process.wait()
            print(f"VPN disconnected from {country.capitalize()}.")
        except subprocess.CalledProcessError as e:
            print(f"Failed to connect to VPN in {country.capitalize()}: {e}")
    else:
        print(f"Could not find VPN configuration for {country.capitalize()}.")

def disconnect_vpn():
    """Disconnect from the VPN."""
    try:
        print("Disconnecting from VPN...")
        subprocess.run(["sudo", "killall", "openvpn"], check=True)
        print("Disconnected successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Failed to disconnect from VPN: {e}")

def main():
    if len(sys.argv) < 2:
        print("No arguments provided. Installing dependencies and verifying configurations...")
        install_dependencies()
        print("All dependencies are ready. Use --help for available options.")
        return

    command = sys.argv[1]

    if command == "--help" or command == "-H":
        show_help()
    elif command == "--version" or command == "-V":
        print(f"too version: {VERSION}")
    elif command == "--disconnect":
        disconnect_vpn()
    elif command in COUNTRIES:
        connect_vpn(command)
    elif command == "too":
        print("Installing dependencies and verifying VPN configurations...")
        install_dependencies()
        print("Setup completed. Use --help for available options.")
    elif command == "--remove":
        remove_tool()
    elif command == "--update":
        update_tool()
    else:
        print(f"Unknown command: {command}. Use --help for available options.")

if __name__ == "__main__":
    main()
